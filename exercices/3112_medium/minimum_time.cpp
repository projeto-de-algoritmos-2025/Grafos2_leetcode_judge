#include <vector>
#include <queue>
#include <climits>
using namespace std;

class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        // Criando um grafo representado como uma lista de adjac√™ncia, onde cada n√≥ tem uma lista de pares (v√©rtice adjacente, peso da aresta)
        vector<vector<pair<int, int>>> graph(n);
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            graph[u].emplace_back(v, w);
            graph[v].emplace_back(u, w);
        }

        // Vetor dist que armazena o menor tempo para alcan√ßar cada v√©rtice a partir do v√©rtice 0
        // Inicializamos com INT_MAX para representar que ainda n√£o encontramos um caminho para o v√©rtice
        vector<int> dist(n, INT_MAX);
        dist[0] = 0; // O tempo para alcan√ßar o v√©rtice 0 √© 0

        // Fila de prioridade (min-heap) para processar os v√©rtices com o menor tempo acumulado
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.emplace(0, 0); // Adicionamos o v√©rtice 0 com tempo 0 √† fila de prioridade

        // Algoritmo de Dijkstra modificado para garantir que n√£o ultrapassamos o tempo limite de "desaparecimento"
        while (!pq.empty()) {
            auto [time, u] = pq.top(); pq.pop();
            
            // üí° Essa linha √© cr√≠tica para otimiza√ß√£o
            // Se j√° encontramos um tempo melhor para o v√©rtice u ou se o tempo j√° ultrapassou o limite de desaparecimento, ignoramos
            if (time > dist[u] || time >= disappear[u]) continue;

            // Iterando sobre os vizinhos do v√©rtice u
            for (auto& [v, w] : graph[u]) {
                // Calculamos o novo tempo para o v√©rtice v
                int new_time = time + w;
                // Se encontramos um caminho mais r√°pido para v e ainda est√° dentro do limite de desaparecimento, atualizamos a dist√¢ncia
                if (new_time < dist[v] && new_time < disappear[v]) {
                    dist[v] = new_time;
                    pq.emplace(new_time, v); // Adicionamos o v√©rtice v √† fila de prioridade com o novo tempo
                }
            }
        }

        // Se algum v√©rtice n√£o foi alcan√ßado (dist√¢ncia permanece como INT_MAX), o tempo √© -1
        for (int i = 0; i < n; ++i) {
            if (dist[i] == INT_MAX) dist[i] = -1;
        }

        // Retornamos o vetor de dist√¢ncias
        return dist;
    }
};
